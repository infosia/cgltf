/**
 * vrm_types - VRM types generated by vrm_type_generator
 *
 * Distributed under the MIT License, see notice at the end of this file.
 *
 */

#ifndef CGLTF_VRM_TYPES_H_INCLUDED__
#define CGLTF_VRM_TYPES_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

typedef enum cgltf_vrm_blendshape_group_presetName {
	cgltf_vrm_blendshape_group_presetName_unknown,
	cgltf_vrm_blendshape_group_presetName_neutral,
	cgltf_vrm_blendshape_group_presetName_a,
	cgltf_vrm_blendshape_group_presetName_i,
	cgltf_vrm_blendshape_group_presetName_u,
	cgltf_vrm_blendshape_group_presetName_e,
	cgltf_vrm_blendshape_group_presetName_o,
	cgltf_vrm_blendshape_group_presetName_blink,
	cgltf_vrm_blendshape_group_presetName_joy,
	cgltf_vrm_blendshape_group_presetName_angry,
	cgltf_vrm_blendshape_group_presetName_sorrow,
	cgltf_vrm_blendshape_group_presetName_fun,
	cgltf_vrm_blendshape_group_presetName_lookup,
	cgltf_vrm_blendshape_group_presetName_lookdown,
	cgltf_vrm_blendshape_group_presetName_lookleft,
	cgltf_vrm_blendshape_group_presetName_lookright,
	cgltf_vrm_blendshape_group_presetName_blink_l,
	cgltf_vrm_blendshape_group_presetName_blink_r,
} cgltf_vrm_blendshape_group_presetName;

typedef enum cgltf_vrm_firstperson_lookAtTypeName {
	cgltf_vrm_firstperson_lookAtTypeName_Bone,
	cgltf_vrm_firstperson_lookAtTypeName_BlendShape,
} cgltf_vrm_firstperson_lookAtTypeName;

typedef enum cgltf_vrm_humanoid_bone_bone {
	cgltf_vrm_humanoid_bone_bone_hips,
	cgltf_vrm_humanoid_bone_bone_leftUpperLeg,
	cgltf_vrm_humanoid_bone_bone_rightUpperLeg,
	cgltf_vrm_humanoid_bone_bone_leftLowerLeg,
	cgltf_vrm_humanoid_bone_bone_rightLowerLeg,
	cgltf_vrm_humanoid_bone_bone_leftFoot,
	cgltf_vrm_humanoid_bone_bone_rightFoot,
	cgltf_vrm_humanoid_bone_bone_spine,
	cgltf_vrm_humanoid_bone_bone_chest,
	cgltf_vrm_humanoid_bone_bone_neck,
	cgltf_vrm_humanoid_bone_bone_head,
	cgltf_vrm_humanoid_bone_bone_leftShoulder,
	cgltf_vrm_humanoid_bone_bone_rightShoulder,
	cgltf_vrm_humanoid_bone_bone_leftUpperArm,
	cgltf_vrm_humanoid_bone_bone_rightUpperArm,
	cgltf_vrm_humanoid_bone_bone_leftLowerArm,
	cgltf_vrm_humanoid_bone_bone_rightLowerArm,
	cgltf_vrm_humanoid_bone_bone_leftHand,
	cgltf_vrm_humanoid_bone_bone_rightHand,
	cgltf_vrm_humanoid_bone_bone_leftToes,
	cgltf_vrm_humanoid_bone_bone_rightToes,
	cgltf_vrm_humanoid_bone_bone_leftEye,
	cgltf_vrm_humanoid_bone_bone_rightEye,
	cgltf_vrm_humanoid_bone_bone_jaw,
	cgltf_vrm_humanoid_bone_bone_leftThumbProximal,
	cgltf_vrm_humanoid_bone_bone_leftThumbIntermediate,
	cgltf_vrm_humanoid_bone_bone_leftThumbDistal,
	cgltf_vrm_humanoid_bone_bone_leftIndexProximal,
	cgltf_vrm_humanoid_bone_bone_leftIndexIntermediate,
	cgltf_vrm_humanoid_bone_bone_leftIndexDistal,
	cgltf_vrm_humanoid_bone_bone_leftMiddleProximal,
	cgltf_vrm_humanoid_bone_bone_leftMiddleIntermediate,
	cgltf_vrm_humanoid_bone_bone_leftMiddleDistal,
	cgltf_vrm_humanoid_bone_bone_leftRingProximal,
	cgltf_vrm_humanoid_bone_bone_leftRingIntermediate,
	cgltf_vrm_humanoid_bone_bone_leftRingDistal,
	cgltf_vrm_humanoid_bone_bone_leftLittleProximal,
	cgltf_vrm_humanoid_bone_bone_leftLittleIntermediate,
	cgltf_vrm_humanoid_bone_bone_leftLittleDistal,
	cgltf_vrm_humanoid_bone_bone_rightThumbProximal,
	cgltf_vrm_humanoid_bone_bone_rightThumbIntermediate,
	cgltf_vrm_humanoid_bone_bone_rightThumbDistal,
	cgltf_vrm_humanoid_bone_bone_rightIndexProximal,
	cgltf_vrm_humanoid_bone_bone_rightIndexIntermediate,
	cgltf_vrm_humanoid_bone_bone_rightIndexDistal,
	cgltf_vrm_humanoid_bone_bone_rightMiddleProximal,
	cgltf_vrm_humanoid_bone_bone_rightMiddleIntermediate,
	cgltf_vrm_humanoid_bone_bone_rightMiddleDistal,
	cgltf_vrm_humanoid_bone_bone_rightRingProximal,
	cgltf_vrm_humanoid_bone_bone_rightRingIntermediate,
	cgltf_vrm_humanoid_bone_bone_rightRingDistal,
	cgltf_vrm_humanoid_bone_bone_rightLittleProximal,
	cgltf_vrm_humanoid_bone_bone_rightLittleIntermediate,
	cgltf_vrm_humanoid_bone_bone_rightLittleDistal,
	cgltf_vrm_humanoid_bone_bone_upperChest,
} cgltf_vrm_humanoid_bone_bone;

typedef enum cgltf_vrm_meta_allowedUserName {
	cgltf_vrm_meta_allowedUserName_OnlyAuthor,
	cgltf_vrm_meta_allowedUserName_ExplicitlyLicensedPerson,
	cgltf_vrm_meta_allowedUserName_Everyone,
} cgltf_vrm_meta_allowedUserName;

typedef enum cgltf_vrm_meta_violentUssageName {
	cgltf_vrm_meta_violentUssageName_Disallow,
	cgltf_vrm_meta_violentUssageName_Allow,
} cgltf_vrm_meta_violentUssageName;

typedef enum cgltf_vrm_meta_sexualUssageName {
	cgltf_vrm_meta_sexualUssageName_Disallow,
	cgltf_vrm_meta_sexualUssageName_Allow,
} cgltf_vrm_meta_sexualUssageName;

typedef enum cgltf_vrm_meta_commercialUssageName {
	cgltf_vrm_meta_commercialUssageName_Disallow,
	cgltf_vrm_meta_commercialUssageName_Allow,
} cgltf_vrm_meta_commercialUssageName;

typedef enum cgltf_vrm_meta_licenseName {
	cgltf_vrm_meta_licenseName_Redistribution_Prohibited,
	cgltf_vrm_meta_licenseName_CC0,
	cgltf_vrm_meta_licenseName_CC_BY,
	cgltf_vrm_meta_licenseName_CC_BY_NC,
	cgltf_vrm_meta_licenseName_CC_BY_SA,
	cgltf_vrm_meta_licenseName_CC_BY_NC_SA,
	cgltf_vrm_meta_licenseName_CC_BY_ND,
	cgltf_vrm_meta_licenseName_CC_BY_NC_ND,
	cgltf_vrm_meta_licenseName_Other,
} cgltf_vrm_meta_licenseName;
typedef struct cgltf_vrm_secondaryanimation_collidergroup_colliders {
	cgltf_float* offset; // [x, y, z]
	cgltf_size offset_count;
	cgltf_float radius;
} cgltf_vrm_secondaryanimation_collidergroup_colliders;
typedef struct cgltf_vrm_secondaryanimation_spring {
	char* comment;
	cgltf_float stiffiness;
	cgltf_float gravityPower;
	cgltf_float* gravityDir; // [x, y, z]
	cgltf_size gravityDir_count;
	cgltf_float dragForce;
	cgltf_int center;
	cgltf_float hitRadius;
	cgltf_int* bones;
	cgltf_size bones_count;
	cgltf_int* colliderGroups;
	cgltf_size colliderGroups_count;
} cgltf_vrm_secondaryanimation_spring;

typedef struct cgltf_vrm_secondaryanimation_collidergroup {
	cgltf_int node;
	cgltf_vrm_secondaryanimation_collidergroup_colliders* colliders;
	cgltf_size colliders_count;
} cgltf_vrm_secondaryanimation_collidergroup;

typedef struct cgltf_vrm_secondaryanimation {
	cgltf_vrm_secondaryanimation_spring* boneGroups;
	cgltf_size boneGroups_count;
	cgltf_vrm_secondaryanimation_collidergroup* colliderGroups;
	cgltf_size colliderGroups_count;
} cgltf_vrm_secondaryanimation;

typedef struct cgltf_vrm_blendshape_bind {
	cgltf_int mesh;
	cgltf_int index;
	cgltf_float weight;
} cgltf_vrm_blendshape_bind;

typedef struct cgltf_vrm_blendshape_materialbind {
	char* materialName;
	char* propertyName;
	cgltf_float* targetValue;
	cgltf_size targetValue_count;
} cgltf_vrm_blendshape_materialbind;

typedef struct cgltf_vrm_blendshape_group {
	char* name;
	cgltf_vrm_blendshape_group_presetName presetName;
	cgltf_vrm_blendshape_bind* binds;
	cgltf_size binds_count;
	cgltf_vrm_blendshape_materialbind* materialValues;
	cgltf_size materialValues_count;
	cgltf_bool isBinary;
} cgltf_vrm_blendshape_group;

typedef struct cgltf_vrm_blendshape {
	cgltf_vrm_blendshape_group* blendShapeGroups;
	cgltf_size blendShapeGroups_count;
} cgltf_vrm_blendshape;

typedef struct cgltf_vrm_firstperson_degreemap {
	cgltf_float* curve;
	cgltf_size curve_count;
	cgltf_float xRange;
	cgltf_float yRange;
} cgltf_vrm_firstperson_degreemap;

typedef struct cgltf_vrm_firstperson_meshannotation {
	cgltf_int mesh;
	char* firstPersonFlag;
} cgltf_vrm_firstperson_meshannotation;

typedef struct cgltf_vrm_firstperson {
	cgltf_int firstPersonBone;
	cgltf_float* firstPersonBoneOffset; // [x, y, z]
	cgltf_size firstPersonBoneOffset_count;
	cgltf_vrm_firstperson_meshannotation* meshAnnotations;
	cgltf_size meshAnnotations_count;
	cgltf_vrm_firstperson_lookAtTypeName lookAtTypeName;
	cgltf_vrm_firstperson_degreemap lookAtHorizontalInner;
	cgltf_vrm_firstperson_degreemap lookAtHorizontalOuter;
	cgltf_vrm_firstperson_degreemap lookAtVerticalDown;
	cgltf_vrm_firstperson_degreemap lookAtVerticalUp;
} cgltf_vrm_firstperson;

typedef struct cgltf_vrm_humanoid_bone {
	cgltf_vrm_humanoid_bone_bone bone;
	cgltf_int node;
	cgltf_bool useDefaultValues;
	cgltf_float* min; // [x, y, z]
	cgltf_size min_count;
	cgltf_float* max; // [x, y, z]
	cgltf_size max_count;
	cgltf_float* center; // [x, y, z]
	cgltf_size center_count;
	cgltf_float axisLength;
} cgltf_vrm_humanoid_bone;

typedef struct cgltf_vrm_humanoid {
	cgltf_vrm_humanoid_bone* humanBones;
	cgltf_size humanBones_count;
	cgltf_float armStretch;
	cgltf_float legStretch;
	cgltf_float upperArmTwist;
	cgltf_float lowerArmTwist;
	cgltf_float upperLegTwist;
	cgltf_float lowerLegTwist;
	cgltf_float feetSpacing;
	cgltf_bool hasTranslationDoF;
} cgltf_vrm_humanoid;

typedef struct cgltf_vrm_material {
	char* name;
	char* shader;
	cgltf_int renderQueue;
	char** floatProperties_keys;
	cgltf_float* floatProperties_values;
	cgltf_size floatProperties_count;
	char** vectorProperties_keys;
	cgltf_float** vectorProperties_values;
	cgltf_size vectorProperties_count;
	cgltf_size* vectorProperties_floats_size;
	char** textureProperties_keys;
	cgltf_int* textureProperties_values;
	cgltf_size textureProperties_count;
	char** keywordMap_keys;
	cgltf_bool* keywordMap_values;
	cgltf_size keywordMap_count;
	char** tagMap_keys;
	char** tagMap_values;
	cgltf_size tagMap_count;
} cgltf_vrm_material;

typedef struct cgltf_vrm_meta {
	char* title;
	char* version;
	char* author;
	char* contactInformation;
	char* reference;
	cgltf_int texture;
	cgltf_vrm_meta_allowedUserName allowedUserName;
	cgltf_vrm_meta_violentUssageName violentUssageName;
	cgltf_vrm_meta_sexualUssageName sexualUssageName;
	cgltf_vrm_meta_commercialUssageName commercialUssageName;
	char* otherPermissionUrl;
	cgltf_vrm_meta_licenseName licenseName;
	char* otherLicenseUrl;
} cgltf_vrm_meta;

typedef struct cgltf_vrm {
	char* exporterVersion;
	char* specVersion;
	cgltf_vrm_meta meta;
	cgltf_vrm_humanoid humanoid;
	cgltf_vrm_firstperson firstPerson;
	cgltf_vrm_blendshape blendShapeMaster;
	cgltf_vrm_secondaryanimation secondaryAnimation;
	cgltf_vrm_material* materialProperties;
	cgltf_size materialProperties_count;
} cgltf_vrm;

#ifdef __cplusplus
}
#endif

#endif /* #ifndef CGLTF_VRM_TYPES_H_INCLUDED__ */

/* vrm_types is distributed under MIT license:
 *
 * Copyright (c) 2020 Kota Iguchi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
